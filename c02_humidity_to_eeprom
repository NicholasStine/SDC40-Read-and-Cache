//#include <SensirionI2CScd4x.h>
#include <avr/sfr_defs.h>
#include <Arduino.h>
#include <EEPROM.h>
#include <Wire.h>
#include <math.h>

// Sketch Parameters
//    You can change these variables
//    to adjust what the sketch does.
bool PRINT_CSV = true;
int MEM_LIM = E2END;
int CO2_MAX = 1200;
int CO2_MIN = 100;
int DELAY = 5000;

// Sketch Variables
uint8_t sdaPin = 20;
uint8_t sclPin = 21;
int eeprom_i = 0;
SensirionI2CScd4x scd4x;

// Las Funciones
//     It's usually better to do the
//     complicated stuff in small, 
//     separated functions like this

//     This is called Separation of Concerns
//     and it makes your code cleaner and
//     easier to read.

// Output the sensor readings to serial monitor
void printReading(int co2, double humidity) {
  if (PRINT_CSV) Serial.println(String(co2) + "," + String(int(humidity)));
  else Serial.println("\n(" + String(eeprom_i) + ")\nCO2:\t\t" + String(co2) + "ppm\nHumidity:\t" + String(int(humidity)) + "%");
}

// Compress the co2 and humitity readings into 4 bits each, and return them as one byte (8 bits).
byte compressReadings(double co2, int humidity) {
  double co2_clamped = max(CO2_MIN, min(CO2_MAX, co2)) - 100;   // clamp co2 from 100 to 500, and subtract 100 to start from 0
  double co2_double = co2_clamped / ((CO2_MAX - CO2_MIN) / 16);  // Round the co2 to the nearest 25 (500-100 / 16, or 4 bits)
  int co2_4bit = int(co2_double + (co2_double - int(co2_double) > 0.5));
  int hum_4bit = int(humidity / 6.25) << 4;                     // Round humidity to the nearest 6.25 (100 percent / 16), then nearest int
                                                                // Humidity is << 4 to fill bit positions 5-8 in the combined byte
  return co2_4bit + hum_4bit;
}

// Store the readings in EEPROM until the memeory limit is reached
void saveReadingsToEeprom(double co2, int humidity) {
  if (eeprom_i <= MEM_LIM) {
    printReading(co2, humidity);
    byte compressed_readings = compressReadings(co2, humidity);
    EEPROM.write(eeprom_i, compressed_readings);
    eeprom_i = eeprom_i + 1;
  } 
  else if (eeprom_i == MEM_LIM + 1) {
    if (!PRINT_CSV) Serial.println("End of Memory Reached");
    eeprom_i = eeprom_i + 1;
  }
}

// SETUP AND LOOP
void setup() {
  // Begin Serial and i2c
  Serial.begin(19200);
  Wire.begin();
  scd4x.begin(Wire);

  // Tell the sensor to start taking readings
  uint16_t error;
  error = scd4x.startPeriodicMeasurement();

  // Print the CSV headers
  Serial.println("CO2, Humidity");
}

void loop() {
  uint16_t co2;
  float humidity;
  float temperature;
//  uint16_t error;
//  uint16_t co2 = random(CO2_MIN, CO2_MAX);
//  float humidity = random(0, 100);

    error = scd4x.readMeasurement(co2, temperature, humidity);
    if (error) {
        Serial.print("Error trying to execute readMeasurement(): ");
        Serial.println("Error");
    } else if (co2 == 0) {
        Serial.println("Invalid sample detected, skipping.");
    } else {
        saveReadingsToEeprom(co2, humidity);
    }
  
    delay(DELAY);
}
